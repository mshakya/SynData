#!/usr/bin/env python

"""
Syn data generator.

for generating

"""

from __future__ import print_function
import os
import sys
import yaml
import argparse
import luigi
dir_path = os.path.dirname(os.path.realpath(__file__))
lib_path = os.path.abspath(os.path.join(dir_path, '..'))
bin_path = os.path.join(lib_path, 'bin')
sys.path.append(lib_path)
os.environ["PATH"] += os.pathsep + bin_path
from syndata import art_illumina


def cmdline_parser():
    """
    Create an argparse instance.

    Combination of different options for this script.
    """
    class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                          argparse.RawDescriptionHelpFormatter):
        """For multiple formatters of argparse."""

        pass

    parser = argparse.ArgumentParser(formatter_class=CustomFormatter,
                                     prog='runPiReT',
                                     description="""Luigi based workflow for running
                                     synthetic data pipeline""",
                                     epilog="""
================================================================================
Generates synthetic data (FASTQ and SAM files)
================================================================================
Example run:\n
        run_syndata -i <yaml>

        """)

    required_args = parser.add_argument_group('required arguments')

    required_args.add_argument("-i", dest="IN_YAML", help="""YAML file with
        input parameters.""", required=True)

    return parser


def main():
    """
    Main function.

    All functions are called here.
    """
    parser = cmdline_parser()
    args = parser.parse_args()

    config = yaml.load(open(args.IN_YAML))
    art_illumina_config = config['art_illumina']
    metagenome_config = config['metagenome_options']

    fasta_input = get_files_list(config['in_folder'], (".fasta", ".fna"))

    no_of_jobs = sum(1 for x in fasta_input)
    ref_list = get_files_list(config['in_folder'], (".fasta", ".fna"))
    luigi.interface.build([art_illumina.RunAllArtIllumina(ref_list=list(ref_list),
                                                          art_options=art_illumina_config,
                                                          metagenome=config['metagenome'],
                                                          distribution=metagenome_config['distribution'],
                                                          out_dir=config['out_folder']),

                          art_illumina.MergeSynFiles(distribution=metagenome_config['distribution'],
                                                     ref_list=list(ref_list),
                                                     art_options=art_illumina_config,
                                                     metagenome=config['metagenome'],
                                                     metagenome_options=metagenome_config,
                                                     out_dir=config['out_folder'])],
                          local_scheduler=True, workers=no_of_jobs)


def get_files_list(dir, ext):
    """
    Return absolute path of files with given extension.

    given dir : directory where files are
    give ext : a list or tuple of list of extension

    """

    for dirpath, _, filenames in os.walk(dir):
        for f in filenames:
            if f.endswith(ext):
                yield os.path.abspath(os.path.join(dirpath, f))


if __name__ == '__main__':
        main()
