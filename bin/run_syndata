#!/usr/bin/env python

"""
Syn data generator.

for generating 

"""

from __future__ import print_function
import os
import sys
import yaml
import argparse
dir_path = os.path.dirname(os.path.realpath(__file__))
lib_path = os.path.abspath(os.path.join(dir_path, '..'))
bin_path = os.path.join(lib_path, 'bin')
sys.path.append(lib_path)
os.environ["PATH"] += os.pathsep + bin_path
from syndata import call_art_illumina
import luigi



def cmdline_parser():
    """
    Create an argparse instance.

    Combination of different options for this script.
    """
    class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                          argparse.RawDescriptionHelpFormatter):
        """For multiple formatters of argparse."""

        pass

    parser = argparse.ArgumentParser(formatter_class=CustomFormatter,
                                     prog='runPiReT',
                                     description="""Luigi based workflow for running
                                     RNASeq pipeline""",
                                     epilog="""
when selecting both kingodm runs, options that are required for both eukaryotes
and prokaryotes run are required.

Example run for Prokaryotes RNA seq:\n
        runPiReT -d <workdir> -e <design file>  -gp <gff> -i <hisat2 index>
        -k prokarya -m <EdgeR/Deseq2> -fp <FASTA>

Example run for Eukaryotes RNA seq:\n
        runPiReT -d <workdir> -e <design file>  -ge <gff> -i <hisat2 index>
        -k eukarya -m <EdgeR/Deseq2> -fe <FASTA>

Example run for Both (Eukaryotes and Prokaryotes) RNA seq:\n
        runPiReT -d <workdir> -e <design file>  -gp <gff> -ge <gff> -i <hisat2 index>
        -k both -m <EdgeR/Deseq2> -fe <FASTA> -fp <FASTA>
        """)

    required_args = parser.add_argument_group('required arguments')

    required_args.add_argument("-i", dest="IN_YAML", help="""yaml file with 
        all the inputs""", required=True)

    return parser


def main():
    """
    Main function.

    All functions are called here.
    """
    parser = cmdline_parser()
    args = parser.parse_args()

    config = yaml.load(open(args.IN_YAML))
    print(config)



if __name__ == '__main__':
        main()
