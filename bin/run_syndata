#!/usr/bin/env python

"""
Syn data generator.

for generating

"""

from __future__ import print_function
import os
import sys
import yaml
import argparse
dir_path = os.path.dirname(os.path.realpath(__file__))
lib_path = os.path.abspath(os.path.join(dir_path, '..'))
bin_path = os.path.join(lib_path, 'bin')
sys.path.append(lib_path)
os.environ["PATH"] += os.pathsep + bin_path
from syndata import call_art_illumina
# import luigi


def cmdline_parser():
    """
    Create an argparse instance.

    Combination of different options for this script.
    """
    class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                          argparse.RawDescriptionHelpFormatter):
        """For multiple formatters of argparse."""

        pass

    parser = argparse.ArgumentParser(formatter_class=CustomFormatter,
                                     prog='runPiReT',
                                     description="""Luigi based workflow for running
                                     synthetic data pipeline""",
                                     epilog="""
================================================================================
Generates synthetic data (FASTQ and SAM files)
================================================================================
Example run:\n
        run_syndata -i <yaml>

        """)

    required_args = parser.add_argument_group('required arguments')

    required_args.add_argument("-i", dest="IN_YAML", help="""YAML file with
        input parameters.""", required=True)

    return parser


def main():
    """
    Main function.

    All functions are called here.
    """
    parser = cmdline_parser()
    args = parser.parse_args()

    config = yaml.load(open(args.IN_YAML))

    fasta_input = [os.path.abspath(each) for each in os.listdir(config['in_folder']) if each.endswith('.fasta')]
    
    for fasta_file in fasta_input:
        fasta_option = call_art_illumina(input=fasta_file, out=config['out_folder'])

        print(fasta_option)


if __name__ == '__main__':
        main()
